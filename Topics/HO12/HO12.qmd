---
title: "Information Dashboard Design"
author: "Wan Kee"
date: "16 March 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true 
  warning: false
  message: false
  error: true
  freeze: true # git add_freeze/
---

# 1. Learning Objectives

1.  Introducing information dashboard

2.  Information dashboard design best practices

3.  Common mistakes in dashboard design

4.  Information dashboard graphs

    -   Bullet graph
    -   Sparklines
    -   Bandlines

5.  Build industry standard dashboard by using R Shiny

# 2. Import Packages

-   `tidyverse` provides a collection of functions for performing data science task

-   `lubridate` provides functions to work with dates and times more efficiently.

-   `ggthemes` is an extension of `ggplot2`.

-   `gtExtras` provides some additional helper functions to assist in creating beautiful tables with `gt`, an R package specially designed for tables.

-   `reactable` provides functions to create interactive data tables for R, based on the React Table library and made with reactR.

-   `reactablefmtr` provides various features to streamline and enhance the styling of interactive reactable tables with easy-to-use and highly-customization functions and themes.

```{r}
pacman::p_load(lubridate, ggthemes, reactable, reactablefmtr, gt, gtExtras, tidyverse, readr, dataui)
```

# 3. Load Data

 `coffeechain` is a personal database in Microsoft Access mdb format.
 
`odbcConnectAccess()` of [**RODBC**](https://cran.r-project.org/web/packages/RODBC/) package is used used to import a database query table into R.

`odbcConnectAccess()` is based on 32bit and not 64bit. Do change the R system to 32bit version.

Console:
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

```{r}
#| eval: false
# Install and load the required package
# install.packages("RODBC")
library(RODBC)

# Connect to the Access database
con <- odbcConnectAccess2007('data/Coffee Chain.mdb')
con <- odbcDriverConnect('data/Coffee Chain.mdb')

# Fetch data from the database
coffeechain <- sqlFetch(con, 'CoffeeChain Query')

# Save the data as an RDS file
write_rds(coffeechain, "data/CoffeeChain.rds")

# Close the connection
odbcClose(con)
```

::: {.callout-note}
Note that RODBC does not work for Mac OS.
:::

```{r}
coffeechain <- read_rds("data/rds/CoffeeChain.rds")
glimpse(coffeechain)
```

# 4. Prepare Data

Aggregate `Sales` and `Budget Sales` at the `Product`.

```{r}
product <- coffeechain %>%
  group_by(`Product`) %>%
  summarise(`target` = sum(`Budget Sales`),
            `current` = sum(`Sales`)) %>%
  ungroup()
glimpse(product)
```

Compute the minimum, maximum and end of the the month sales.

```{r}
sales_report <- coffeechain %>%
  filter(Date >= "2013-01-01") %>%
  mutate(Month = month(Date)) %>%
  group_by(Month, Product) %>%
  summarise(Sales = sum(Sales)) %>%
  ungroup() %>%
  select(Month, Product, Sales)
```

```{r}
mins <- group_by(sales_report, Product) %>% 
  slice(which.min(Sales))
maxs <- group_by(sales_report, Product) %>% 
  slice(which.max(Sales))
ends <- group_by(sales_report, Product) %>% 
  filter(Month == max(Month))
```

```{r}
quarts <- sales_report %>%
  group_by(Product) %>%
  summarise(quart1 = quantile(Sales, 0.25),
            quart2 = quantile(Sales, 0.75)) %>%
  right_join(sales_report)
```


gtExtras 

```{r}
report <- coffeechain %>%
  mutate(Year = year(Date)) %>%
  filter(Year == "2013") %>%
  mutate (Month = month(Date, abbr = TRUE)) %>%
  group_by(Product, Month) %>%
  summarise(Sales = sum(Sales)) %>%
  ungroup()
glimpse(report)
```

```{r}
report %>%
  group_by(Product) %>%
  summarize('Monthly Sales' = list(Sales), 
            .groups = "drop")
```

# 5. Visualize Data

# 5.1 Bullet Chart

A bullet chart displays and compares performance (`current`) against predefined `target` values. 

`geom_col()` adds the different components of the bullet chart, namely maximum, 75% and 50%. `geom_errorbar()` adds error bars to show the target value.

```{r}
ggplot(product, aes(Product, current)) + 
  geom_col(aes(Product, max(target) * 1.01),
           fill="grey85", width=0.85) +
  geom_col(aes(Product, target * 0.75),
           fill="grey60", width=0.85) +
  geom_col(aes(Product, target * 0.5),
           fill="grey50", width=0.85) +
  geom_col(aes(Product, current), 
           width=0.35,
           fill = "black") + 
  geom_errorbar(aes(y = target, x = Product, 
                    ymin = target, ymax= target), 
                width = .4,
                colour = "purple",
                size = 1) +
  coord_flip()
```
`gt_plt_bullet()` create a bullet chart within the table with several arguments, `column = current` and `target = target`. `gt_theme_538()` applies a predefined theme.

```{r}
product %>%
  gt::gt() %>%
  gt_plt_bullet(column = current, 
                target = target,
                width = 60,
                palette = c("lightblue", "black")) %>%
  gt_theme_538()
```


# 5.2 Sparklines

Sparklines are small, simple, and condensed line charts that are used to display trends or variations in data within a narrow space.

`facet_grid()` facets the plot by `Product`, creating separate sparkline plots. `geom_ribbon()` adds a ribbon to represent quartiles for data variability.

```{r}
ggplot(sales_report, aes(x=Month, y=Sales)) + 
  facet_grid(Product ~ ., scales = "free_y") + 
  geom_ribbon(data = quarts, aes(ymin = quart1, max = quart2), 
              fill = 'grey90') +
  geom_line(size=0.3) +
  geom_point(data = mins, col = 'red') +
  geom_point(data = maxs, col = 'blue') +
  geom_text(data = mins, aes(label = Sales), vjust = -1) +
  geom_text(data = maxs, aes(label = Sales), vjust = 2.5) +
  geom_text(data = ends, aes(label = Sales), hjust = 0, nudge_x = 0.5) +
  geom_text(data = ends, aes(label = Product), hjust = 0, nudge_x = 1.0) +
  expand_limits(x = max(sales_report$Month) + 
                  (0.25 * (max(sales_report$Month) - min(sales_report$Month)))) +
  scale_x_continuous(breaks = seq(1, 12, 1)) +
  scale_y_continuous(expand = c(0.1, 0)) +
  theme_tufte(base_size = 3, base_family = "Helvetica") +
  theme(axis.title=element_blank(), axis.text.y = element_blank(), 
        axis.ticks = element_blank(), strip.text = element_blank())
```

```{r}
report %>%
  group_by(Product) %>%
  summarize('Monthly Sales' = list(Sales), .groups = "drop") %>%
  gt() %>%
  gt_plt_sparkline('Monthly Sales', same_limit = FALSE)
```

```{r}
spark <- report %>%
  group_by(Product) %>%
  summarize('Monthly Sales' = list(Sales), .groups = "drop")

sales <- report %>% 
  group_by(Product) %>% 
  summarise("Min" = min(Sales, na.rm = T),
            "Max" = max(Sales, na.rm = T),
            "Average" = mean(Sales, na.rm = T)
            )

sales_data = left_join(sales, spark)

sales_data %>%
  gt() %>%
  gt_plt_sparkline('Monthly Sales', same_limit = FALSE)
```

```{r}
bullet <- coffeechain %>%
  filter(Date >= "2013-01-01") %>%
  group_by(`Product`) %>%
  summarise(`Target` = sum(`Budget Sales`),
            `Actual` = sum(`Sales`)) %>%
  ungroup() 

sales_data = sales_data %>%
  left_join(bullet)

sales_data %>%
  gt() %>%
  gt_plt_sparkline('Monthly Sales') %>%
  gt_plt_bullet(column = Actual, 
                target = Target, 
                width = 28,
                palette = c("lightblue", "black")) %>%
  gt_theme_538()
```

# 5.3 Interactive Plots

`reactable` package is designed to create interactive and responsive tables in R Markdown documents, Shiny apps, and HTML widgets. It provides a wide range of features for creating tables with sortable columns, searchable data, pagination, filtering, row selection.

`reactablefmtr` package complements reactable by providing additional formatting options and functionalities for tables created using reactable. It offers features such as formatting numerical values, customizing cell styles based on conditions, adding tooltips, and more.

```{r}
#| eval: false
remotes::install_github("timelyportfolio/dataui")
```

```{r}
report <- report %>%
  group_by(Product) %>%
  summarize(`Monthly Sales` = list(Sales))
```
`highlight_points` argument shows the minimum and maximum values points and `label` argument is used to label first and last values.

```{r}
reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(
        report,
        highlight_points = highlight_points(
          min = "red", max = "blue"),
        labels = c("first", "last")
        )
    )
  )
)
```
::: panel-tabset
## Reference Line

`statline` argument shows the mean line.

```{r}
reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(
        report,
        highlight_points = highlight_points(
          min = "red", max = "blue"),
        statline = "mean"
        )
    )
  )
)
```

## Bandline

`bandline` argument shows the bandline.

```{r}
reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(
        report,
        highlight_points = highlight_points(
          min = "red", max = "blue"),
        line_width = 1,
        bandline = "innerquartiles",
        bandline_color = "green"
        )
    )
  )
)
```

## Sparkbars

```{r}
reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkbar(
        report,
        highlight_bars = highlight_bars(
          min = "red", max = "blue"),
        bandline = "innerquartiles",
        statline = "mean")
    )
  )
)
```

:::

Reference:
1. https://kcuilla.github.io/reactablefmtr/